# app.py
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
import process as process
from radar_diagram import RadarDiagram

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ú–æ–¥–µ–ª—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è", 
    layout="wide",
    page_icon="üåä"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'data_sol' not in st.session_state:
    st.session_state.data_sol = None
if 'calculation_done' not in st.session_state:
    st.session_state.calculation_done = False
if 'free_members' not in st.session_state:
    st.session_state.free_members = None

# –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üåä –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è")
st.markdown("---")

# –í–∫–ª–∞–¥–∫–∏ 
tab1, tab2, tab3, tab4 = st.tabs(["üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "üìà –ì—Ä–∞—Ñ–∏–∫–∏", "üéØ –î–∏–∞–≥—Ä–∞–º–º–∞", "‚ö° –í–æ–∑–º—É—â–µ–Ω–∏–µ"])

with tab1:
    st.header("–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è")
    
    start_values = []
    labels = process.labels_array()
    
    # –°–æ–∑–¥–∞–µ–º 14 –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ (Z1-Z14) –≤ 2 –∫–æ–ª–æ–Ω–∫–∏
    cols = st.columns(2)
    for i in range(14):
        with cols[i % 2]:
            default_values = {
                0: 0.1,   # Z1 - —á–∏—Å–ª–æ –ø–æ–≥–∏–±—à–∏—Ö –ª—é–¥–µ–π
                1: 0.3,   # Z2 - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä–∞–∂–∞—é—â–µ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
                2: 0.2,   # Z3 - –ø–ª–æ—â–∞–¥—å –∑–æ–Ω—ã –ß–°
                3: 0.4,   # Z4 - —á–∏—Å–ª–æ –ª—é–¥–µ–π, —É—Ç—Ä–∞—Ç–∏–≤—à–∏—Ö –∏–º—É—â–µ—Å—Ç–≤–æ
                4: 0.3,   # Z5 - —É—â–µ—Ä–± –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                5: 0.5,   # Z6 - –æ–±—ä–µ–º –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–Ω—Ç–∞
                6: 0.4,   # Z7 - –ø–ª–æ—â–∞–¥—å –∑–µ–º–µ–ª—å, –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–∑ –æ–±–æ—Ä–æ—Ç–∞
                7: 0.3,   # Z8 - —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è –∑–µ–º–µ–ª—å
                8: 0.6,   # Z9 - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                9: 0.2,   # Z10 - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                10: 0.4,  # Z11 - —á–∏—Å–ª–æ –ø–æ—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Å–µ–ª—å—Ö–æ–∑ –∂–∏–≤–æ—Ç–Ω—ã—Ö
                11: 0.5,  # Z12 - –≤–µ–ª–∏—á–∏–Ω–∞ –ø–æ–≥–∏–±—à–µ–≥–æ —É—Ä–æ–∂–∞—è
                12: 0.3,  # Z13 - –ø–ª–æ—â–∞–¥—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã—Ö –ª–µ—Å–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
                13: 0.4   # Z14 - —É—â–µ—Ä–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –µ–¥–∏–Ω–∏—Ü–µ
            }
            value = st.number_input(
                labels[i],
                value=default_values.get(i, 0.5),
                min_value=0.0,
                max_value=1.0,
                key=f"param_{i}"
            )
            start_values.append(value)

    st.header("–§—É–Ω–∫—Ü–∏–∏ –≤–∑–∞–∏–º–æ–≤–ª–∏—è–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    st.info("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è 66 —Ñ—É–Ω–∫—Ü–∏–π –º–æ–¥–µ–ª–∏")
    
    free_members = []
    selected_functions = []
    
    # –°–æ–∑–¥–∞–µ–º 66 —Ñ—É–Ω–∫—Ü–∏–π (f1-f66) —Å–æ–≥–ª–∞—Å–Ω–æ PDF
    # –î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ –ø–æ–∫–∞–∂–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Ñ—É–Ω–∫—Ü–∏–π
    # –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±—É–¥—É—Ç –≤—Å–µ 66
    for i in range(10):  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ 66 –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        with st.expander(f"f{i+1}(x) - {process.get_function_description(i)}", expanded=False):
            func_type = process.get_function_type(i)
            default_coeffs = process.get_default_coefficients(i)
            
            if func_type == "polynomial_4":
                cols = st.columns(4)
                with cols[0]:
                    a = st.number_input("a (x‚Å¥)", value=float(default_coeffs[0]), key=f"f{i}_a")
                with cols[1]:
                    b = st.number_input("b (x¬≥)", value=float(default_coeffs[1]), key=f"f{i}_b")
                with cols[2]:
                    c = st.number_input("c (x¬≤)", value=float(default_coeffs[2]), key=f"f{i}_c")
                with cols[3]:
                    d = st.number_input("d (x)", value=float(default_coeffs[3]), key=f"f{i}_d")
                free_members.append([a, b, c, d])
                
            elif func_type == "exponential":
                cols = st.columns(3)
                with cols[0]:
                    const = st.number_input("–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞", value=float(default_coeffs[0]), key=f"f{i}_a")
                with cols[1]:
                    coef1 = st.number_input("–∫–æ—ç—Ñ. 1/x", value=float(default_coeffs[1]), key=f"f{i}_b")
                with cols[2]:
                    coef2 = st.number_input("–∫–æ—ç—Ñ. log10(x)", value=float(default_coeffs[2]), key=f"f{i}_c")
                free_members.append([const, coef1, coef2])
                
            elif func_type == "polynomial_2":
                cols = st.columns(3)
                with cols[0]:
                    a = st.number_input("a (x¬≤)", value=float(default_coeffs[0]), key=f"f{i}_a")
                with cols[1]:
                    b = st.number_input("b (x)", value=float(default_coeffs[1]), key=f"f{i}_b")
                with cols[2]:
                    c = st.number_input("c", value=float(default_coeffs[2]), key=f"f{i}_c")
                free_members.append([a, b, c])
                
            elif func_type == "linear":
                cols = st.columns(2)
                with cols[0]:
                    a = st.number_input("a (x)", value=float(default_coeffs[0]), key=f"f{i}_a")
                with cols[1]:
                    b = st.number_input("b", value=float(default_coeffs[1]), key=f"f{i}_b")
                free_members.append([a, b])
            
            selected_functions.append(i+1)

    # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
    st.markdown("---")
    if st.button("üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç", use_container_width=True):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á–µ—Ç –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è..."):
            try:
                st.session_state.free_members = free_members
                st.session_state.selected_functions = selected_functions
                
                process.free_members_of_fun_expr = free_members
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
                process.dict_of_function_expressions.clear()
                for j in range(min(10, len(selected_functions))):
                    process.activatedCombox(j, str(selected_functions[j]))
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
                t, data_sol = process.process_calculation(start_values, free_members)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.session_state.data_sol = data_sol
                st.session_state.t = t
                st.session_state.calculation_done = True
                
                st.success("‚úÖ –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏: {str(e)}")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ (tab2, tab3, tab4) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
with tab2:
    st.header("–î–∏–Ω–∞–º–∏–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è")
    
    if st.session_state.calculation_done and st.session_state.data_sol is not None:
        t = st.session_state.t
        data_sol = st.session_state.data_sol
        labels = process.labels_array()
        
        fig, ax = plt.subplots(figsize=(12, 8))
        for i in range(14):
            ax.plot(t, data_sol[:, i], label=labels[i], linewidth=2)
        
        ax.set_xlabel('–í—Ä–µ–º—è')
        ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
        ax.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è')
        ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=9)
        ax.grid(True, alpha=0.3)
        ax.set_xlim([0, 1])
        
        st.pyplot(fig)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        from io import BytesIO
        buf = BytesIO()
        fig.savefig(buf, format="png", dpi=300, bbox_inches='tight')
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
            data=buf.getvalue(),
            file_name="–≥—Ä–∞—Ñ–∏–∫_–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤_–Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è.png",
            mime="image/png",
            use_container_width=True
        )
    else:
        st.info("‚ÑπÔ∏è –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫")

with tab3:
    st.header("–†–∞–¥–∞—Ä-–¥–∏–∞–≥—Ä–∞–º–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è")
    
    if st.session_state.calculation_done and st.session_state.data_sol is not None:
        radar = RadarDiagram()
        data_sol = st.session_state.data_sol
        labels = process.labels_array()
        n = len(data_sol)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–ù–∞—á–∞–ª—å–Ω—ã–π vs –ö–æ–Ω–µ—á–Ω—ã–π –º–æ–º–µ–Ω—Ç")
            fig_final = radar.draw([data_sol[0], data_sol[-1]], labels,
                                 "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            st.pyplot(fig_final)
            
        with col2:
            st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ —á–µ—Ç–≤–µ—Ä—Ç—è–º")
            quarter_idx = n // 4
            half_idx = n // 2
            three_quarter_idx = 3 * n // 4
            
            fig_quarters = radar.draw([
                data_sol[0], 
                data_sol[quarter_idx],
                data_sol[half_idx],
                data_sol[three_quarter_idx]
            ], labels, "–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ —á–µ—Ç–≤–µ—Ä—Ç—è–º –≤—Ä–µ–º–µ–Ω–∏")
            st.pyplot(fig_quarters)
            
    else:
        st.info("‚ÑπÔ∏è –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã")

with tab4:
    st.header("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–æ–∑–º—É—â–µ–Ω–∏–π")
    
    if st.session_state.calculation_done and st.session_state.free_members is not None:
        t = st.session_state.t
        fig = process.draw_third_graphic(t)
        
        fig.set_size_inches(10, 6)
        ax = fig.gca()
        ax.set_xlabel('–í—Ä–µ–º—è')
        ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
        ax.set_title('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–æ–∑–º—É—â–µ–Ω–∏–π')
        ax.legend()
        ax.grid(True)
        
        st.pyplot(fig)
        
    else:
        st.info("‚ÑπÔ∏è –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –≤–æ–∑–º—É—â–µ–Ω–∏–π")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("### üìä –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è")
st.markdown("**–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏**")