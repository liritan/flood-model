# web_app_flood.py
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
import functions as functions
import process as process
from radar_diagram import RadarDiagram

st.set_page_config(page_title="–ú–æ–¥–µ–ª—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è", layout="wide")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'data_sol' not in st.session_state:
    st.session_state.data_sol = None
if 'calculation_done' not in st.session_state:
    st.session_state.calculation_done = False
if 'free_members' not in st.session_state:
    st.session_state.free_members = None

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("–ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è")

# –í–∫–ª–∞–¥–∫–∏ 
tab1, tab2, tab3, tab4 = st.tabs(["–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "–ì—Ä–∞—Ñ–∏–∫–∏", "–î–∏–∞–≥—Ä–∞–º–º–∞", "–í–æ–∑–º—É—â–µ–Ω–∏–µ"])

with tab1:
    st.header("–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è")
    
    start_values = []
    labels = process.labels_array()
    
    # –°–æ–∑–¥–∞–µ–º 14 –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ (Z1-Z14) –≤ 2 –∫–æ–ª–æ–Ω–∫–∏
    cols = st.columns(2)
    for i in range(14):
        with cols[i % 2]:
            default_values = {
                0: 0.1,   # Z1 - —á–∏—Å–ª–æ –ø–æ–≥–∏–±—à–∏—Ö –ª—é–¥–µ–π
                1: 0.3,   # Z2 - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä–∞–∂–∞—é—â–µ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
                2: 0.2,   # Z3 - –ø–ª–æ—â–∞–¥—å –∑–æ–Ω—ã –ß–°
                3: 0.4,   # Z4 - —á–∏—Å–ª–æ –ª—é–¥–µ–π, —É—Ç—Ä–∞—Ç–∏–≤—à–∏—Ö –∏–º—É—â–µ—Å—Ç–≤–æ
                4: 0.3,   # Z5 - —É—â–µ—Ä–± –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                5: 0.5,   # Z6 - –æ–±—ä–µ–º –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–Ω—Ç–∞
                6: 0.4,   # Z7 - –ø–ª–æ—â–∞–¥—å –∑–µ–º–µ–ª—å, –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–∑ –æ–±–æ—Ä–æ—Ç–∞
                7: 0.3,   # Z8 - —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è –∑–µ–º–µ–ª—å
                8: 0.6,   # Z9 - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                9: 0.2,   # Z10 - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                10: 0.4,  # Z11 - —á–∏—Å–ª–æ –ø–æ—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Å–µ–ª—å—Ö–æ–∑ –∂–∏–≤–æ—Ç–Ω—ã—Ö
                11: 0.5,  # Z12 - –≤–µ–ª–∏—á–∏–Ω–∞ –ø–æ–≥–∏–±—à–µ–≥–æ —É—Ä–æ–∂–∞—è
                12: 0.3,  # Z13 - –ø–ª–æ—â–∞–¥—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã—Ö –ª–µ—Å–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
                13: 0.4   # Z14 - —É—â–µ—Ä–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –µ–¥–∏–Ω–∏—Ü–µ
            }
            value = st.number_input(
                labels[i],
                value=default_values.get(i, 0.5),
                min_value=0.0,
                max_value=1.0,
                key=f"param_{i}"
            )
            start_values.append(value)

    st.header("–§—É–Ω–∫—Ü–∏–∏ –≤–∑–∞–∏–º–æ–≤–ª–∏—è–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    free_members = []
    selected_functions = []
    
    # –°–æ–∑–¥–∞–µ–º 66 —Ñ—É–Ω–∫—Ü–∏–π (f1-f66) —Å–æ–≥–ª–∞—Å–Ω–æ PDF
    for i in range(66):
        with st.expander(f"f{i+1}(x) - {process.get_function_description(i)}", expanded=False):
            func_type = process.get_function_type(i)
            default_coeffs = process.get_default_coefficients(i)
            
            col_header = st.columns([1, 3])
            with col_header[0]:
                func_select = st.selectbox(
                    f"f{i+1}(x) ‚Üí",
                    options=list(range(1, 128)),
                    index=min(i, 126),
                    key=f"func_{i}_select"
                )
                selected_functions.append(func_select)
            with col_header[1]:
                st.write(f"F{func_select}(x)")
            
            if func_type == "polynomial_4":
                cols = st.columns(4)
                with cols[0]:
                    a = st.number_input("a (x‚Å¥)", value=float(default_coeffs[0]), key=f"f{i}_a")
                with cols[1]:
                    b = st.number_input("b (x¬≥)", value=float(default_coeffs[1]), key=f"f{i}_b")
                with cols[2]:
                    c = st.number_input("c (x¬≤)", value=float(default_coeffs[2]), key=f"f{i}_c")
                with cols[3]:
                    d = st.number_input("d (x)", value=float(default_coeffs[3]), key=f"f{i}_d")
                free_members.append([a, b, c, d])
                
            elif func_type == "exponential":
                cols = st.columns(3)
                with cols[0]:
                    const = st.number_input("–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞", value=float(default_coeffs[0]), key=f"f{i}_a")
                with cols[1]:
                    coef1 = st.number_input("–∫–æ—ç—Ñ. 1/x", value=float(default_coeffs[1]), key=f"f{i}_b")
                with cols[2]:
                    coef2 = st.number_input("–∫–æ—ç—Ñ. log10(x)", value=float(default_coeffs[2]), key=f"f{i}_c")
                free_members.append([const, coef1, coef2])
                
            elif func_type == "polynomial_2":
                cols = st.columns(3)
                with cols[0]:
                    a = st.number_input("a (x¬≤)", value=float(default_coeffs[0]), key=f"f{i}_a")
                with cols[1]:
                    b = st.number_input("b (x)", value=float(default_coeffs[1]), key=f"f{i}_b")
                with cols[2]:
                    c = st.number_input("c", value=float(default_coeffs[2]), key=f"f{i}_c")
                free_members.append([a, b, c])
                
            elif func_type == "linear":
                cols = st.columns(2)
                with cols[0]:
                    a = st.number_input("a (x)", value=float(default_coeffs[0]), key=f"f{i}_a")
                with cols[1]:
                    b = st.number_input("b", value=float(default_coeffs[1]), key=f"f{i}_b")
                free_members.append([a, b])

    st.markdown("---")
    
    col_status1, col_status2, col_status3 = st.columns([1, 2, 1])
    with col_status2:
        status_placeholder = st.empty()
        status_placeholder.text("–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π")
    
    col_calc1, col_calc2, col_calc3 = st.columns([1, 2, 1])
    with col_calc2:
        if st.button("–í—ã—á–∏—Å–ª–∏—Ç—å", use_container_width=True, key="main_calculate"):
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á–µ—Ç –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è..."):
                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
                    st.session_state.free_members = free_members
                    st.session_state.selected_functions = selected_functions
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    process.free_members_of_fun_expr = free_members
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
                    process.dict_of_function_expressions.clear()
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                    for j in range(min(66, len(selected_functions))):
                        process.activatedCombox(j, str(selected_functions[j]))
                    
                    # –í—Ä–µ–º—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                    t = np.linspace(0, 1, 80)
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
                    t, data_sol = process.process_calculation(start_values, free_members)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    st.session_state.data_sol = data_sol
                    st.session_state.t = t
                    st.session_state.calculation_done = True
                    
                    status_placeholder.text("–°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ")
                    st.success("–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                    
                except Exception as e:
                    status_placeholder.text("–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞")
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏: {str(e)}")

with tab2:
    st.header("–î–∏–Ω–∞–º–∏–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è")
    
    if st.session_state.calculation_done and st.session_state.data_sol is not None:
        if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"):
            t = st.session_state.t
            data_sol = st.session_state.data_sol
            labels = process.labels_array()
            
            fig, ax = plt.subplots(figsize=(15, 10))
            for i in range(14):
                ax.plot(t, data_sol[:, i], label=labels[i], linewidth=2)
            
            ax.set_xlabel('–í—Ä–µ–º—è')
            ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
            ax.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è')
            ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=10)
            ax.grid(True, alpha=0.3)
            ax.set_xlim([0, 1])
            
            st.pyplot(fig)
            
            from io import BytesIO
            buf = BytesIO()
            fig.savefig(buf, format="png", dpi=300, bbox_inches='tight')
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
                data=buf.getvalue(),
                file_name="–≥—Ä–∞—Ñ–∏–∫_–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤_–Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è.png",
                mime="image/png",
                use_container_width=True
            )
    else:
        st.info("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫")

with tab3:
    st.header("–†–∞–¥–∞—Ä-–¥–∏–∞–≥—Ä–∞–º–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è")
    
    if st.session_state.calculation_done and st.session_state.data_sol is not None:
        radar = RadarDiagram()
        diagrams = {}
        data_sol = st.session_state.data_sol
        labels = process.labels_array()
        n = len(data_sol)
        
        diagrams['initial'] = radar.draw([data_sol[0]], labels, 
                                       "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –Ω–∞—á–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏")
        
        quarter_idx = n // 4
        diagrams['quarter'] = radar.draw([data_sol[0], data_sol[quarter_idx]], labels,
                                       "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ 1 —á–µ—Ç–≤–µ—Ä—Ç–∏")
        
        half_idx = n // 2
        diagrams['half'] = radar.draw([data_sol[0], data_sol[half_idx]], labels,
                                    "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ 2 —á–µ—Ç–≤–µ—Ä—Ç–∏")
        
        three_quarter_idx = 3 * n // 4
        diagrams['three_quarters'] = radar.draw([data_sol[0], data_sol[three_quarter_idx]], labels,
                                              "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ 3 —á–µ—Ç–≤–µ—Ä—Ç–∏")
        
        diagrams['final'] = radar.draw([data_sol[0], data_sol[-1]], labels,
                                     "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–Ω–µ—á–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–ù–∞—á–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç")
            st.pyplot(diagrams['initial'])
            
            st.subheader("1/2 –≤—Ä–µ–º–µ–Ω–∏")
            st.pyplot(diagrams['half'])
            
            st.subheader("–ö–æ–Ω–µ—á–Ω—ã–π –º–æ–º–µ–Ω—Ç")
            st.pyplot(diagrams['final'])
        
        with col2:
            st.subheader("1/4 –≤—Ä–µ–º–µ–Ω–∏")
            st.pyplot(diagrams['quarter'])
            
            st.subheader("3/4 –≤—Ä–µ–º–µ–Ω–∏")
            st.pyplot(diagrams['three_quarters'])
            
    else:
        st.info("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã")

with tab4:
    st.header("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–æ–∑–º—É—â–µ–Ω–∏–π")
    
    if st.session_state.calculation_done and st.session_state.free_members is not None:
        t = st.session_state.t
        fig = process.draw_third_graphic(t)
        
        fig.set_size_inches(10, 6)
        ax = fig.gca()
        ax.set_xlabel('–í—Ä–µ–º—è')
        ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
        ax.set_title('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–æ–∑–º—É—â–µ–Ω–∏–π –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è')
        ax.legend()
        ax.grid(True)
        
        st.pyplot(fig)
        
        from io import BytesIO
        buf = BytesIO()
        fig.savefig(buf, format="png", dpi=300, bbox_inches='tight')
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤–æ–∑–º—É—â–µ–Ω–∏–π",
            data=buf.getvalue(),
            file_name="–≥—Ä–∞—Ñ–∏–∫_–≤–æ–∑–º—É—â–µ–Ω–∏–π_–Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è.png",
            mime="image/png",
            use_container_width=True
        )
        
    else:
        st.info("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –≤–æ–∑–º—É—â–µ–Ω–∏–π")

st.markdown("---")
st.write("–ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è - –û—Ü–µ–Ω–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏")